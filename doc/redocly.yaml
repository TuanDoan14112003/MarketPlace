openapi: 3.0.0
info:
  title: Ankon API
  description: Ankon API
  termsOfService: https://www.google.com/policies/terms/
  version: 1.0.0-oas3
servers:
  - url: /
security:
  - JWT: []
paths:
  /api/v1/auth/activate/{uid}/{token}/:
    get:
      summary: Activate user account
      tags:
        - auth
      description: ''
      operationId: auth_activate_read
      parameters:
        - name: token
          in: path
          required: true
          style: simple
          explode: false
          schema:
            type: string
          
          example: b7noa1-b0f031066d9144aaa5308e42ee301101
        - name: uid
          in: path
          required: true
          style: simple
          explode: false
          schema:
            type: string
          example: MjM
      responses:
        '204':
          description: Your account has been activated
        '400':
          description: Invalid activation link
        '403':
          description: This activation link has already been used
  /api/v1/auth/jwt/create/:
    post:
      summary: Generate JWT access and refresh tokens
      tags:
        - auth
      description: >-
        Takes a set of user credentials and returns an access and refresh JSON
        web

        token pair to prove the authentication of those credentials.
      operationId: auth_jwt_create_create
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenObtainPair'
        required: true
      responses:
        '201':
          description: ''
          content:
            application/json:
              schema:
                properties:
                  access:
                    type: string
                    example: "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ0b2tlbl90eXBlIjoicmVmcmVzaCIsImV4cCI6MTY1NjQ5MzEyOSwianRpIjoiNGFlZDM1MGUzNmEwNGYyM2JlMzRjMWFkYWI2Y2UyMjIiLCJ1c2VyX2lkIjoxfQ.kIdqGcuxGYQdAkD1bQtA9zMHAIsmTme9UwEXW6KMHlw"
                  refresh:
                    type: string
                    example: "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ0b2tlbl90eXBlIjoiYWNjZXNzIiwiZXhwIjoxNjU2NDA3MDI5LCJqdGkiOiJjODE1MjllZjUxMDM0MzFkYmQ5NzI3NzY0OTExMTU0MyIsInVzZXJfaWQiOjF9.mclsvZA-FznYRg5G9vjNle8OpdMFODNjzBaLeaTGL9o"
  /api/v1/auth/jwt/refresh/:
    post:
      summary: Refresh JWT tokens
      tags:
        - auth
      description: |-
        Takes a refresh type JSON web token and returns an access type JSON web
        token if the refresh token is valid.
      operationId: auth_jwt_refresh_create
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenRefresh'
        required: true
      responses:
        '201':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenRefresh'
  /api/v1/auth/jwt/verify/:
    post:
      summary: Verify access token
      tags:
        - auth
      description: |-
        Takes a token and indicates if it is valid.  This view provides no
        information about a token's fitness for a particular use.
      operationId: auth_jwt_verify_create
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenVerify'
        required: true
      responses:
        '201':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenVerify'
  /api/v1/auth/users/:
    get:
      summary: Get all users
      tags:
        - auth
      description: ''
      operationId: auth_users_list
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
    post:
      summary: Register/Create new user
      tags:
        - auth
      description: ''
      operationId: auth_users_create
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserCreate'
        required: true
      responses:
        '201':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserCreate'
  /api/v1/auth/users/me/:
    get:
      tags:
        - auth
      description: ''
      operationId: auth_users_me_read
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
    put:
      tags:
        - auth
      description: ''
      operationId: auth_users_me_update
      requestBody:
        $ref: '#/components/requestBodies/User'
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
    delete:
      tags:
        - auth
      description: ''
      operationId: auth_users_me_delete
      responses:
        '204':
          description: ''
    patch:
      tags:
        - auth
      description: ''
      operationId: auth_users_me_partial_update
      requestBody:
        $ref: '#/components/requestBodies/User'
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
  /api/v1/auth/users/resend_activation/:
    post:
      tags:
        - auth
      description: ''
      operationId: auth_users_resend_activation
      requestBody:
        $ref: '#/components/requestBodies/SendEmailReset'
      responses:
        '201':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SendEmailReset'
  /api/v1/auth/users/reset_password/:
    post:
      tags:
        - auth
      description: ''
      operationId: auth_users_reset_password
      requestBody:
        $ref: '#/components/requestBodies/SendEmailReset'
      responses:
        '201':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SendEmailReset'
  /api/v1/auth/users/reset_password_confirm/:
    post:
      tags:
        - auth
      description: ''
      operationId: auth_users_reset_password_confirm
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PasswordResetConfirm'
        required: true
      responses:
        '201':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PasswordResetConfirm'
  /api/v1/auth/users/reset_username/:
    post:
      tags:
        - auth
      description: ''
      operationId: auth_users_reset_username
      requestBody:
        $ref: '#/components/requestBodies/SendEmailReset'
      responses:
        '201':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SendEmailReset'
  /api/v1/auth/users/reset_username_confirm/:
    post:
      tags:
        - auth
      description: ''
      operationId: auth_users_reset_username_confirm
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UsernameResetConfirm'
        required: true
      responses:
        '201':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsernameResetConfirm'
  /api/v1/auth/users/set_password/:
    post:
      tags:
        - auth
      description: ''
      operationId: auth_users_set_password
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SetPassword'
        required: true
      responses:
        '201':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SetPassword'
  /api/v1/auth/users/set_username/:
    post:
      tags:
        - auth
      description: ''
      operationId: auth_users_set_username
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SetUsername'
        required: true
      responses:
        '201':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SetUsername'
  /api/v1/auth/users/{id}/:
    get:
      tags:
        - auth
      description: ''
      operationId: auth_users_read
      parameters:
        - name: id
          in: path
          description: A unique integer value identifying this user.
          required: true
          style: simple
          explode: false
          schema:
            type: integer
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
    put:
      tags:
        - auth
      description: ''
      operationId: auth_users_update
      parameters:
        - name: id
          in: path
          description: A unique integer value identifying this user.
          required: true
          style: simple
          explode: false
          schema:
            type: integer
      requestBody:
        $ref: '#/components/requestBodies/User'
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
    delete:
      tags:
        - auth
      description: ''
      operationId: auth_users_delete
      parameters:
        - name: id
          in: path
          description: A unique integer value identifying this user.
          required: true
          style: simple
          explode: false
          schema:
            type: integer
      responses:
        '204':
          description: ''
    patch:
      tags:
        - auth
      description: ''
      operationId: auth_users_partial_update
      parameters:
        - name: id
          in: path
          description: A unique integer value identifying this user.
          required: true
          style: simple
          explode: false
          schema:
            type: integer
      requestBody:
        $ref: '#/components/requestBodies/User'
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
  /api/v1/social/channels/:
    get:
      summary: Get all channels
      tags:
        - social
      description: List, create view for model Channel
      operationId: social_channels_list
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Channel'
    post:
      summary: Create a new channel
      tags:
        - social
      description: List, create view for model Channel
      operationId: social_channels_create
      requestBody:
        content:
          application/json:
            schema:
              properties:
                name:
                  type: string
                  maxLength: 50
                  example: "channel name example"
        required: true
      responses:
        '201':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Channel'
  /api/v1/social/channels/{id}/:
    get:
      summary: Get a channel's details
      tags:
        - social
      description: Retrieve, update, destroy view for model Channel
      operationId: social_channels_read
      parameters:
        - name: id
          in: path
          description: A unique integer value identifying this channel.
          required: true
          style: simple
          explode: false
          schema:
            type: integer
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DetailedChannel'
    put:
      summary: Update a channel
      tags:
        - social
      description: Retrieve, update, destroy view for model Channel
      operationId: social_channels_update
      parameters:
        - name: id
          in: path
          description: A unique integer value identifying this channel.
          required: true
          style: simple
          explode: false
          schema:
            type: integer
      requestBody:
        $ref: '#/components/requestBodies/DetailedChannel'
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DetailedChannel'
    delete:
      summary: Delete a channel
      tags:
        - social
      description: Retrieve, update, destroy view for model Channel
      operationId: social_channels_delete
      parameters:
        - name: id
          in: path
          description: A unique integer value identifying this channel.
          required: true
          style: simple
          explode: false
          schema:
            type: integer
      responses:
        '204':
          description: ''
    patch:
      summary: Partially update a channel
      tags:
        - social
      description: Retrieve, update, destroy view for model Channel
      operationId: social_channels_partial_update
      parameters:
        - name: id
          in: path
          description: A unique integer value identifying this channel.
          required: true
          style: simple
          explode: false
          schema:
            type: integer
      requestBody:
        $ref: '#/components/requestBodies/DetailedChannel'
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DetailedChannel'
  /api/v1/social/comments/create/:
    post:
      summary: Create a new comment
      tags:
        - social
      description: Create view for model Comment
      operationId: social_comments_create_create
      requestBody:
        content:
          application/json:
            schema:
              properties:
                post_id:
                  type: integer
                body: 
                  example: "body example"
                  type: string
          
        required: true
      responses:
        '201':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Comment'
  /api/v1/social/posts/:
    get:
      summary: Get all posts
      tags:
        - social
      description: List, create view for model Post
      operationId: social_posts_list
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Post'
    post:
      summary: Create a new post
      tags:
        - social
      description: List, create view for model Post
      operationId: social_posts_create
      requestBody:
        content:
          application/json:
            schema:
              properties:
                channel_id: 
                  type: integer
                  example: 0
                title:
                  type: string
                  example: "title example"
                body:
                  type: string
                  example: "body example"
        required: true
      responses:
        '201':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
  /api/v1/social/posts/{id}/:
    get:
      summary: Get a post's details
      tags:
        - social
      description: Retrieve, update, destroy view for model Post
      operationId: social_posts_read
      parameters:
        - name: id
          in: path
          description: A unique integer value identifying this post.
          required: true
          style: simple
          explode: false
          schema:
            type: integer
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DetailedPost'
    put:
      summary: Update a post
      tags:
        - social
      description: Retrieve, update, destroy view for model Post
      operationId: social_posts_update
      parameters:
        - name: id
          in: path
          description: A unique integer value identifying this post.
          required: true
          style: simple
          explode: false
          schema:
            type: integer
      requestBody:
        $ref: '#/components/requestBodies/DetailedPost'
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DetailedPost'
    delete:
      summary: Delete a post
      tags:
        - social
      description: Retrieve, update, destroy view for model Post
      operationId: social_posts_delete
      parameters:
        - name: id
          in: path
          description: A unique integer value identifying this post.
          required: true
          style: simple
          explode: false
          schema:
            type: integer
      responses:
        '204':
          description: ''
    patch:
      summary: Partially update a post
      tags:
        - social
      description: Retrieve, update, destroy view for model Post
      operationId: social_posts_partial_update
      parameters:
        - name: id
          in: path
          description: A unique integer value identifying this post.
          required: true
          style: simple
          explode: false
          schema:
            type: integer
      requestBody:
        $ref: '#/components/requestBodies/DetailedPost'
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DetailedPost'
components:
  schemas:
    TokenObtainPair:
      required:
        - password
        - username
      type: object
      properties:
        username:
          title: Username
          minLength: 1
          type: string
          example: "username_example"
        password:
          title: Password
          minLength: 1
          type: string
          example: "asd*k{]12"
    TokenRefresh:
      required:
        - refresh
      type: object
      properties:
        refresh:
          title: Refresh
          minLength: 1
          type: string
          example: "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ0b2tlbl90eXBlIjoiYWNjZXNzIiwiZXhwIjoxNjU2NDA3MDI5LCJqdGkiOiJjODE1MjllZjUxMDM0MzFkYmQ5NzI3NzY0OTExMTU0MyIsInVzZXJfaWQiOjF9.mclsvZA-FznYRg5G9vjNle8OpdMFODNjzBaLeaTGL9o"
        access:
          title: Access
          type: string
          readOnly: true
          example: "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ0b2tlbl90eXBlIjoicmVmcmVzaCIsImV4cCI6MTY1NjQ5MzEyOSwianRpIjoiNGFlZDM1MGUzNmEwNGYyM2JlMzRjMWFkYWI2Y2UyMjIiLCJ1c2VyX2lkIjoxfQ.kIdqGcuxGYQdAkD1bQtA9zMHAIsmTme9UwEXW6KMHlw"          
    TokenVerify:
      required:
        - token
      type: object
      properties:
        token:
          title: Token
          minLength: 1
          type: string
          example: "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ0b2tlbl90eXBlIjoicmVmcmVzaCIsImV4cCI6MTY1NjQ5MzEyOSwianRpIjoiNGFlZDM1MGUzNmEwNGYyM2JlMzRjMWFkYWI2Y2UyMjIiLCJ1c2VyX2lkIjoxfQ.kIdqGcuxGYQdAkD1bQtA9zMHAIsmTme9UwEXW6KMHlw"   
    User:
      type: object
      properties:
        email:
          title: Email address
          maxLength: 254
          type: string
          format: email
        id:
          title: ID
          type: integer
          readOnly: true
        username:
          title: Username
          minLength: 1
          type: string
          description: >-
            Required. 150 characters or fewer. Letters, digits and @/./+/-/_
            only.
          readOnly: true
          example: "username_example"
    UserCreate:
      required:
        - password
        - username
      type: object
      properties:
        email:
          title: Email address
          maxLength: 254
          type: string
          format: email
        username:
          title: Username
          maxLength: 150
          minLength: 1
          pattern: ^[\w.@+-]+$
          type: string
          description: >-
            Required. 150 characters or fewer. Letters, digits and @/./+/-/_
            only.
          example: "username_example"
        id:
          title: ID
          type: integer
          readOnly: true
        password:
          title: Password
          minLength: 1
          type: string
          example: "a[s{8aL2k*;"
    Activation:
      required:
        - token
        - uid
      type: object
      properties:
        uid:
          title: Uid
          minLength: 1
          type: string
        token:
          title: Token
          minLength: 1
          type: string
    SendEmailReset:
      required:
        - email
      type: object
      properties:
        email:
          title: Email
          minLength: 1
          type: string
          format: email
    PasswordResetConfirm:
      required:
        - new_password
        - token
        - uid
      type: object
      properties:
        uid:
          title: Uid
          minLength: 1
          type: string
        token:
          title: Token
          minLength: 1
          type: string
        new_password:
          title: New password
          minLength: 1
          type: string
    UsernameResetConfirm:
      required:
        - new_username
      type: object
      properties:
        new_username:
          title: Username
          maxLength: 150
          minLength: 1
          pattern: ^[\w.@+-]+$
          type: string
          description: >-
            Required. 150 characters or fewer. Letters, digits and @/./+/-/_
            only.
          example: "new_username_example"
    SetPassword:
      required:
        - current_password
        - new_password
      type: object
      properties:
        new_password:
          title: New password
          minLength: 1
          type: string
          example: "12{3ja*;op["
        current_password:
          title: Current password
          minLength: 1
          type: string
          example: "as*ak2["
    SetUsername:
      required:
        - current_password
        - new_username
      type: object
      properties:
        current_password:
          title: Current password
          minLength: 1
          type: string
        new_username:
          title: Username
          maxLength: 150
          minLength: 1
          pattern: ^[\w.@+-]+$
          type: string
          description: >-
            Required. 150 characters or fewer. Letters, digits and @/./+/-/_
            only.
          example: "new_username"
    CustomUser:
      required:
        - username
      type: object
      properties:
        email:
          title: Email address
          maxLength: 254
          type: string
          format: email
        username:
          title: Username
          maxLength: 150
          minLength: 1
          pattern: ^[\w.@+-]+$
          type: string
          example: "username_example"
          description: >-
            Required. 150 characters or fewer. Letters, digits and @/./+/-/_
            only.
    Channel:
      required:
        - name
        - path
      type: object
      properties:
        id:
          title: ID
          type: integer
          readOnly: true
        owner:
          $ref: '#/components/schemas/CustomUser'
        path:
          title: Path
          minLength: 1
          type: string
          example: '/social/channels/0'
        name:
          title: Name
          maxLength: 50
          minLength: 1
          type: string
          example: "channel name example"
    DetailedChannel:
      required:
        - name
      type: object
      properties:
        id:
          title: ID
          type: integer
          readOnly: true
        owner:
          $ref: '#/components/schemas/CustomUser'
        members:
          type: array
          readOnly: true
          items:
            $ref: '#/components/schemas/CustomUser'
        name:
          title: Name
          maxLength: 50
          minLength: 1
          type: string
          example: "channel name example"
    Comment:
      required:
        - body
        - post_id
      type: object
      properties:
        id:
          title: ID
          type: integer
          readOnly: true
        owner:
          $ref: '#/components/schemas/CustomUser'
        post_id:
          title: Post id
          type: integer
        score:
          title: Score
          type: integer
          readOnly: true
        body:
          title: Body
          minLength: 1
          type: string
          example: "comment example"
    Post:
      required:
        - channel_id
        - path
        - title
      type: object
      properties:
        id:
          title: ID
          type: integer
          readOnly: true
        owner:
          $ref: '#/components/schemas/CustomUser'
        score:
          title: Score
          type: integer
          readOnly: true
        channel_id:
          title: Channel id
          type: integer
        path:
          title: Path
          minLength: 1
          type: string
          example: "/social/posts/0"
        title:
          title: Title
          maxLength: 1000
          minLength: 1
          type: string
          example: "title example"
        body:
          title: Body
          maxLength: 10000
          type: string
          nullable: true
          example: "body example"
    DetailedPost:
      required:
        - channel_id
        - title
      type: object
      properties:
        id:
          title: ID
          type: integer
          readOnly: true
        owner:
          $ref: '#/components/schemas/CustomUser'
        score:
          title: Score
          type: integer
          readOnly: true
        channel_id:
          title: Channel id
          type: integer
        comments:
          type: array
          readOnly: true
          items:
            $ref: '#/components/schemas/Comment'
        title:
          title: Title
          maxLength: 1000
          minLength: 1
          type: string
          example: "title example"
        body:
          title: Body
          maxLength: 10000
          type: string
          nullable: true
          example: "body example"
  requestBodies:
    DetailedChannel:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/DetailedChannel'
      required: true
    DetailedPost:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/DetailedPost'
      required: true

    User:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/User'
      required: true
    SendEmailReset:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/SendEmailReset'
      required: true
  securitySchemes:
    JWT:
      type: http
      scheme: bearer